expr            : TYPE IDENTIFIER EQUAL expr 
                : comp-expr ((AND|OR) comp-expr)*

comp-ext        : BANG comp-expr
                : arith-expr ((EQUAL|LESS|GREATER|LESS_EQUAL|GREATER_EQUAL) arith-expr)*

arith-expr      : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV) factor)*

factor          : (PLUS|MINUS) factor
                : power

power           : call (POW factor)*

call            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom            : NUMBER|IDENTIFIER
                : LPAREN expr RPAREN
                : list-expr
                : if-expr
                : while-expr
                : func-def

list-expr       : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr         : KEYWORD:if LPAREN expr RPAREN LBRACE expr RBRACE
                    (KEYWORD:elif LPAREN expr RPAREN LBRACE expr RBRACE)*
                    (KEYWORD:else :BRACE expr RBRACE)?

while-expr      : KEYWORD:while LPAREN expr RPAREN LBRACE expr RBRACE

func-def        : TYPE IDENTIFIER 
                    LPAREN (TYPE IDENTIFIER (COMMA TYPE IDENTIFIER)*)? RPAREN LBRACE expr BRACE